{{- if eq .chezmoi.os "darwin" -}}
#!/bin/sh
# Homebrew tools presence check from Brewfile
# - Runs after every `chezmoi apply` on macOS
# - Verifies commands via `command -v`
# - Brewfile-driven; supports per-line override: `# cmd: gsed` or `# cmds: kubectl,helm`
# - Exits nonâ€‘zero on failures so CI (GitHub Actions) can detect

set -eu

info() { printf "[homebrew-tools-check] %s\n" "$*"; }

# GitHub Actions annotations
gha_error() {
  if [ "${GITHUB_ACTIONS:-false}" = "true" ]; then
    # Title and message
    printf '::error title=%s::%s\n' "$1" "$2"
  fi
}

gha_group_begin() {
  if [ "${GITHUB_ACTIONS:-false}" = "true" ]; then
    printf '::group::%s\n' "$1"
  fi
}

gha_group_end() {
  if [ "${GITHUB_ACTIONS:-false}" = "true" ]; then
    printf '::endgroup::\n'
  fi
}

append_summary() {
  if [ -n "${GITHUB_STEP_SUMMARY:-}" ]; then
    printf '%s\n' "$1" >>"$GITHUB_STEP_SUMMARY"
  fi
}

# Locate Homebrew and load its shellenv to stabilize PATH
locate_brew() {
  if command -v brew >/dev/null 2>&1; then
    command -v brew
    return 0
  fi
  if [ -x /opt/homebrew/bin/brew ]; then
    printf %s "/opt/homebrew/bin/brew"
    return 0
  fi
  if [ -x /usr/local/bin/brew ]; then
    printf %s "/usr/local/bin/brew"
    return 0
  fi
  return 1
}

BREW_BIN=""
if BREW_BIN=$(locate_brew); then
  # shellcheck disable=SC2046
  eval "$($BREW_BIN shellenv)"
else
  gha_error "Homebrew not found" "brew not found in PATH or standard locations"
  info "brew not found; cannot perform Homebrew tools check"
  exit 1
fi

# Resolve Brewfile path
# Prefer HOMEBREW_BUNDLE_FILE if set. Otherwise prefer ~/.Brewfile (used by `brew bundle --global`),
# falling back to ~/Brewfile for setups that use a non-dot file.
if [ -n "${HOMEBREW_BUNDLE_FILE:-}" ]; then
  BUNDLE_FILE="$HOMEBREW_BUNDLE_FILE"
else
  if [ -f "$HOME/.Brewfile" ]; then
    BUNDLE_FILE="$HOME/.Brewfile"
  else
    BUNDLE_FILE="$HOME/Brewfile"
  fi
fi

if [ ! -f "$BUNDLE_FILE" ]; then
  info "Brewfile not found at $BUNDLE_FILE; skipping check"
  exit 0
fi

# Optional: fast fail using `brew bundle check` (disabled by default)
if [ "${HOMEBREW_TOOLS_CHECK_BUNDLE:-false}" = "true" ]; then
  gha_group_begin "brew bundle check"
  if ! "$BREW_BIN" bundle check --no-upgrade --file "$BUNDLE_FILE" >/tmp/chezmoi-brew-bundle-check.log 2>&1; then
    gha_error "brew bundle check failed" "Some Brewfile entries are not installed"
    if [ -s /tmp/chezmoi-brew-bundle-check.log ]; then
      append_summary "### brew bundle check\n\n\`\`\`\n$(cat /tmp/chezmoi-brew-bundle-check.log)\n\`\`\`"
    fi
    # Do not exit here; continue to command-level checks for better diagnostics
  fi
  gha_group_end
fi

# Map formula to default command names (space-separated)
default_cmds_for_formula() {
  formula=$1
  case "$formula" in
    ripgrep)          printf %s "rg" ;;
    neovim)           printf %s "nvim" ;;
    kubernetes-cli)   printf %s "kubectl" ;;
    awscli)           printf %s "aws" ;;
    sqlite)           printf %s "sqlite3" ;;
    gnu-sed)          printf %s "gsed" ;;
    gnu-tar)          printf %s "gtar" ;;
    openssh)          printf %s "ssh" ;;
    node)             printf %s "node" ;;
    go)               printf %s "go" ;;
    jq)               printf %s "jq" ;;
    yq)               printf %s "yq" ;;
    git)              printf %s "git" ;;
    tmux)             printf %s "tmux" ;;
    zsh)              printf %s "zsh" ;;
    fish)             printf %s "fish" ;;
    starship)         printf %s "starship" ;;
    wget)             printf %s "wget" ;;
    curl)             printf %s "curl" ;;
    fzf)              printf %s "fzf" ;;
    ripgrep-all)      printf %s "rga" ;;
    python@*)
      ver=${formula#python@}
      # Expect pythonX.Y and pipX.Y
      printf %s "python$ver pip$ver" ;;
    *)
      # Default to the formula name itself
      printf %s "%s" "$formula" ;;
  esac
}

# Extract brew formulas and optional overrides from Brewfile
# Output lines as: formula<TAB>override_cmds_or_empty
extract_formulas() {
  awk '
    BEGIN { FS="" }
    {
      line=$0
      # Skip comments and blank lines
      if (line ~ /^[ \t]*$/) next
      if (line ~ /^[ \t]*#/) next
      # Only consider brew entries
      if (line ~ /^[ \t]*brew[ \t]*"[^"]+"/) {
        # capture name in first quoted string after brew
        match(line, /brew[ \t]*"([^"]+)"/, m)
        name=m[1]
        # capture comment part (if any)
        hash=index(line, "#")
        cmds=""
        if (hash>0) {
          comment=substr(line, hash+1)
          # look for cmd: or cmds:
          if (match(comment, /(cmds?|CMDS?)[ \t]*:[ \t]*([^#]+)/, c)) {
            cmds=c[2]
          }
        }
        # trim spaces in cmds
        gsub(/[ \t]/, "", cmds)
        printf "%s\t%s\n", name, cmds
      }
    }
  ' "$BUNDLE_FILE"
}

# Perform command checks
gha_group_begin "Homebrew tools existence checks"

TOTAL=0
MISSING=0
MISSING_LIST=""
CHECKED_CMDS=""

extract_formulas | while IFS="\t" read -r formula overrides; do
  # Determine commands to check
  CMDS=""
  if [ -n "${overrides:-}" ]; then
    # Comma-separated -> space-separated
    CMDS=$(printf %s "$overrides" | tr ',' ' ')
  else
    CMDS=$(default_cmds_for_formula "$formula")
    # If the formula contains '@' and no overrides, emit a tip
    case "$formula" in
      *@*)
        info "hint: consider adding '# cmds: <cmds>' comment for $formula if defaults are not correct"
        ;;
    esac
  fi

  for cmd in $CMDS; do
    # Skip if already checked
    case " $CHECKED_CMDS " in
      *" $cmd "*) continue ;;
    esac
    CHECKED_CMDS="$CHECKED_CMDS $cmd"
    TOTAL=$((TOTAL+1))
    if command -v "$cmd" >/dev/null 2>&1; then
      :
    else
      MISSING=$((MISSING+1))
      MISSING_LIST="$MISSING_LIST\n- $cmd (from $formula)"
      gha_error "Missing command" "$cmd not found in PATH (from $formula)"
    fi
  done
done

gha_group_end

info "checked commands: $TOTAL, missing: $MISSING"

if [ -n "${GITHUB_STEP_SUMMARY:-}" ]; then
  append_summary "### Homebrew Tools Check\n\n- Checked: $TOTAL\n- Missing: $MISSING\n\n#### Details\n${MISSING_LIST:-\n- (none)}"
fi

if [ "$MISSING" -gt 0 ]; then
  exit 1
fi

exit 0
{{- end }}
