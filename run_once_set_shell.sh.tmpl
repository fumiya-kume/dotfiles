#!/bin/sh
# run_once_set_shell.sh.tmpl
# - {{ .shell }} に指定されたシェルへログインシェルを変更
# - /etc/shells 未登録なら追記（可能な範囲で）
# - 非対話(標準入力がTTYでない)なら chsh はスキップ
# - 再実行しても安全（idempotent）

set -eu

log()  { printf '%s\n' "$*"; }
warn() { printf 'WARN: %s\n' "$*" >&2; }

# .shell は [data] セクションで設定してください。
# 例: macOS: /bin/zsh, Linux: /usr/bin/fish, Homebrew fish: /opt/homebrew/bin/fish
DESIRED_SHELL='{{- $v := index . "shell" -}}{{- if $v -}}{{$v}}{{- end -}}'
OS='{{ .chezmoi.os }}'  # "darwin", "linux" など

if [ -z "${DESIRED_SHELL}" ]; then
  warn "No desired shell configured: set [data].shell in chezmoi.toml"
  exit 0
fi

if [ ! -x "${DESIRED_SHELL}" ]; then
  warn "Shell binary not found or not executable: ${DESIRED_SHELL}"
  warn "Set [data].shell to a valid path and ensure it exists."
  exit 0
fi

get_login_shell() {
  case "${OS}" in
    darwin)
      if command -v dscl >/dev/null 2>&1; then
        dscl . -read "/Users/${USER}" UserShell 2>/dev/null | awk 'NR==1{print $2}'
        return
      fi
      ;;
  esac

  if command -v getent >/dev/null 2>&1; then
    getent passwd "${USER}" | awk -F: 'NR==1{print $7}'
    return
  fi

  if [ -r /etc/passwd ]; then
    awk -F: -v u="${USER}" '($1==u){print $7}' /etc/passwd
    return
  fi

  if [ -n "${SHELL-}" ]; then
    printf '%s\n' "${SHELL}"
    return
  fi

  printf '%s\n' ""
}

CURRENT_SHELL="$(get_login_shell || true)"

if [ -n "${CURRENT_SHELL}" ]; then
  if [ "${CURRENT_SHELL}" = "${DESIRED_SHELL}" ]; then
    log "Shell already set to ${DESIRED_SHELL}. Nothing to do."
    exit 0
  else
    log "Current shell: ${CURRENT_SHELL}"
  fi
else
  warn "Could not determine current login shell (will proceed)."
fi

ensure_shell_in_etc_shells() {
  if [ ! -f /etc/shells ]; then
    warn "/etc/shells not found; cannot register ${DESIRED_SHELL}"
    return 1
  fi

  if grep -qxF "${DESIRED_SHELL}" /etc/shells 2>/dev/null; then
    return 0
  fi

  log "Registering ${DESIRED_SHELL} in /etc/shells"
  if [ -w /etc/shells ]; then
    printf '%s\n' "${DESIRED_SHELL}" >> /etc/shells
    return 0
  fi

  # 対話セッションかつ sudo があれば昇格して追記
  if [ -t 0 ] && command -v sudo >/dev/null 2>&1; then
    printf '%s\n' "${DESIRED_SHELL}" | sudo tee -a /etc/shells >/dev/null
    return $?
  fi

  warn "Cannot write /etc/shells (no permission or non-interactive); skipping registration."
  return 1
}

ensure_shell_in_etc_shells || true

# 非対話なら chsh はスキップ（CI 等）
if [ ! -t 0 ]; then
  log "Non-interactive session detected; skipping chsh."
  exit 0
fi

change_shell() {
  if command -v chsh >/dev/null 2>&1; then
    if [ "$(id -u)" -eq 0 ] && [ -n "${SUDO_USER-}" ]; then
      chsh -s "${DESIRED_SHELL}" "${SUDO_USER}"
    elif [ "$(id -u)" -eq 0 ]; then
      chsh -s "${DESIRED_SHELL}" "${USER}"
    else
      chsh -s "${DESIRED_SHELL}"
    fi
    return $?
  fi

  # Linux 代替: usermod
  if [ "${OS}" = "linux" ] && command -v usermod >/dev/null 2>&1; then
    if [ "$(id -u)" -eq 0 ]; then
      usermod -s "${DESIRED_SHELL}" "${USER}"
      return $?
    elif command -v sudo >/dev/null 2>&1; then
      sudo usermod -s "${DESIRED_SHELL}" "${USER}"
      return $?
    fi
  fi

  warn "Neither chsh nor usermod available; cannot change shell."
  return 1
}

if change_shell; then
  log "Changed login shell to ${DESIRED_SHELL}"
else
  warn "Failed to change login shell to ${DESIRED_SHELL}"
fi

exit 0

